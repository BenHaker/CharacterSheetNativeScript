"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var saves_1 = require("./resources/saves");
var classes_1 = require("./resources/classes");
var spells_1 = require("./resources/spells");
var abilities_1 = require("./resources/abilities");
var MetaDataService = (function () {
    function MetaDataService() {
    }
    MetaDataService.prototype.FormatString = function (format) {
        var args = Array.prototype.slice.call(arguments, 1);
        return format.replace(/{(\d+)}/g, function (match, number) {
            return typeof args[number] != 'undefined' ? args[number] : match;
        });
    };
    return MetaDataService;
}());
MetaDataService.getClasses = function () {
    return classes_1.Classes;
};
MetaDataService.getSaves = function (classEnum, level, saveType) {
    var index = 0;
    if (saves_1.Saves[classEnum] == null)
        return 0;
    switch (classEnum) {
        case Class.Fighter:
        case Class.Dwarf:
        case Class.Elf:
        case Class.Halfling:
            index = Math.ceil(level / 3) - 1;
            break;
        case Class.Cleric:
        case Class.Thief:
            index = Math.ceil(level / 4) - 1;
            break;
        case Class.MagicUser:
            index = Math.ceil(level / 5) - 1;
            break;
    }
    if (saves_1.Saves[classEnum][index] == null)
        return 0;
    return saves_1.Saves[classEnum][index][saveType];
};
MetaDataService.getSpellSlots = function (classEnum, characterLevel, spellLevel) {
    var slots = 0;
    var spells;
    switch (classEnum) {
        case Class.Fighter:
        case Class.Dwarf:
        case Class.Thief:
        case Class.Halfling:
            return 0;
        case Class.Cleric:
        case Class.Elf:
        case Class.MagicUser:
            spells = spells_1.SpellsSlots[classEnum];
            if (spells == null)
                return 0;
            if (spells[characterLevel] == null)
                slots = spells[spells.length - 1][spellLevel];
            else
                slots = spells[characterLevel][spellLevel];
            break;
    }
    if (slots == null)
        slots = 0;
    return slots;
};
MetaDataService.getAbilities = function (classEnum, characterLevel) {
    var abilities = new Array();
    var abilityTemplates;
    var abilityTemplate;
    var text;
    var titles;
    var inputs;
    if ((abilities_1.Abilities[classEnum] == null) || (abilities_1.Abilities[classEnum].length == 0))
        return abilities;
    abilityTemplates = abilities_1.Abilities[classEnum].filter((function (abilityTemplate) { return abilityTemplate.level <= characterLevel; }), characterLevel);
    for (var i = 0; i < abilityTemplates.length; ++i) {
        abilityTemplate = abilityTemplates[i];
        text = abilityTemplate.text;
        if (abilityTemplate.table != null && abilityTemplate.table.length > 0) {
            titles = abilityTemplate.table[0];
            inputs = abilityTemplate.table[characterLevel];
            for (var j = 0; j < titles.length; ++j) {
                text += "\n";
                text += titles[j] + ": " + inputs[j];
            }
        }
        abilities.push(new Ability(abilityTemplate.title, text));
    }
    return abilities;
};
exports.MetaDataService = MetaDataService;
var Ability = (function () {
    function Ability(title, text) {
        this.title = title;
        this.text = text;
    }
    return Ability;
}());
exports.Ability = Ability;
var Class;
(function (Class) {
    Class[Class["Cleric"] = 0] = "Cleric";
    Class[Class["Fighter"] = 1] = "Fighter";
    Class[Class["MagicUser"] = 2] = "MagicUser";
    Class[Class["Thief"] = 3] = "Thief";
    Class[Class["Dwarf"] = 4] = "Dwarf";
    Class[Class["Elf"] = 5] = "Elf";
    Class[Class["Halfling"] = 6] = "Halfling";
})(Class = exports.Class || (exports.Class = {}));
var SaveType;
(function (SaveType) {
    SaveType[SaveType["DeathRay"] = 0] = "DeathRay";
    SaveType[SaveType["Wand"] = 1] = "Wand";
    SaveType[SaveType["Paralysis"] = 2] = "Paralysis";
    SaveType[SaveType["DragonBreath"] = 3] = "DragonBreath";
    SaveType[SaveType["RodStaffSpell"] = 4] = "RodStaffSpell";
})(SaveType = exports.SaveType || (exports.SaveType = {}));
//# sourceMappingURL=data:application/json;base64,