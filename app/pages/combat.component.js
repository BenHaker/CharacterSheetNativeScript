"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var datasource_1 = require("../data/datasource");
var characterlogic_1 = require("../data/characterlogic");
var toolbar_component_1 = require("./toolbar.component");
var dialogs_1 = require("ui/dialogs");
var CombatComponent = (function () {
    function CombatComponent(dataService) {
        var _this = this;
        this.dataService = dataService;
        this.currentTab = toolbar_component_1.CharacterTab.Combat;
        this.onAcChange = function (arg) {
            _this.reverseAc = _this.logic.getReverseAC();
        };
        this.addWeapon = function () {
            if (_this.weaponName == null || _this.weaponName == "") {
                dialogs_1.alert("Cannot insert a weapon without a name");
                return;
            }
            if (_this.weaponAttack == null || _this.weaponAttack == "") {
                dialogs_1.alert("Cannot insert a weapon without attack butons");
                return;
            }
            if (_this.weaponDamage == null || _this.weaponDamage == "") {
                dialogs_1.alert("Cannot insert a weapon without damage");
                return;
            }
            var weapon = new datasource_1.Weapon();
            weapon.name = _this.weaponName;
            weapon.attack = _this.weaponAttack;
            weapon.damage = _this.weaponDamage;
            weapon.range = _this.weaponRange;
            if (_this.character.weapons == null)
                _this.character.weapons = new Array();
            _this.character.weapons.push(weapon);
        };
        this.deleteWeapon = function (index) {
            var name = _this.character.weapons[index].name;
            dialogs_1.confirm("Are you sure you want to delete " + name + ". Once deleted " + name + " will be lost. Continue?")
                .then(function (result) {
                if (result == true)
                    _this.character.weapons.splice(index, 1);
            });
        };
    }
    CombatComponent.prototype.ngOnInit = function () {
        this.character = this.dataService.getSelectedCharacter();
        this.logic = new characterlogic_1.CharacterLogic(this.character);
        this.reverseAc = this.logic.getReverseAC();
    };
    return CombatComponent;
}());
CombatComponent = __decorate([
    core_1.Component({
        selector: "combat",
        template: "<GridLayout rows=\"auto, auto, auto, *\">\n                <Toolbar [currentLocation]=\"currentTab\" row=\"0\"></Toolbar>\n                <StackLayout class=\"form\" row=\"1\">\n                    <GridLayout columns=\"auto, *, auto\" rows=\"auto, auto\" class=\"input-field input-sides\">\n                        <Label text=\"THAC0\" row=\"0\" col=\"0\" class=\"body p-r-5\"></Label>\n                        <Label [text]=\"this.logic.getTHAC0()\" row=\"0\" col=\"1\" class=\"body\"></Label>\n                        <Label [text]=\"'(' + this.logic.getAttackBonus() + ')'\" row=\"0\" col=\"2\" class=\"body\"></Label>\n                        <Label text=\"AC\" row=\"1\" col=\"0\" class=\"body\"></Label>\n                        <TextField [(ngModel)]=\"character.ac\" row=\"1\" col=\"1\" keyboardType=\"number\" (ngModelChange)=\"onAcChange($event)\" class=\"input botton_border\"></TextField>\n                        <Label [text]=\"'(' + reverseAc + ')'\" row=\"1\" col=\"2\" class=\"body\"></Label>\n                    </GridLayout>\n                </StackLayout>\n                <StackLayout class=\"form\" row=\"2\">\n                    <GridLayout rows=\"auto, auto\" columns=\"*, *, *, *, *\" class=\"input-field input-sides\">\n                        <Label text=\"Weapon\" row=\"0\" col=\"0\" class=\"body\"></Label>\n                        <Label text=\"Attack\" row=\"0\" col=\"1\" class=\"body\"></Label>\n                        <Label text=\"Damage\" row=\"0\" col=\"2\" class=\"body\"></Label>\n                        <Label text=\"Range\" row=\"0\" col=\"3\" class=\"body\"></Label>\n                        <TextField [(ngModel)]=\"weaponName\" row=\"1\" col=\"0\" class=\"input botton_border\" style=\"margin-right:10px;\"></TextField>\n                        <TextField [(ngModel)]=\"weaponAttack\" row=\"1\" col=\"1\" class=\"input botton_border\" style=\"margin-right:10px;\"></TextField>\n                        <TextField [(ngModel)]=\"weaponDamage\" row=\"1\" col=\"2\" class=\"input botton_border\" style=\"margin-right:10px;\"></TextField>\n                        <TextField [(ngModel)]=\"weaponRange\" row=\"1\" col=\"3\" class=\"input botton_border\"></TextField>\n                        <Button text=\"Add\" (tap)=\"addWeapon()\" row=\"1\" col=\"4\" class=\"btn-primary btn-form\"></Button>\n                    </GridLayout>\n                </StackLayout>\n                <StackLayout row=\"3\" class=\"form\">\n                    <ListView [items]=\"character.weapons\" class=\"input-field input-sides\">\n                        <ng-template let-item=\"item\" let-i=\"index\">\n                            <GridLayout columns=\"*, *, *, *, *\">\n                                <Label [text]=\"[item.name]\" col=\"0\" class=\"body\"></Label>\n                                <Label [text]=\"[item.attack]\" col=\"1\" class=\"body\"></Label>\n                                <Label [text]=\"[item.damage]\" col=\"2\" class=\"body\"></Label>\n                                <Label [text]=\"item.range\" col=\"3\" class=\"body\"></Label>\n                                <Button text=\"Delete\" (tap)=\"deleteWeapon(i)\" col=\"4\" class=\"btn-primary btn-form\" textWrap=\"true\"></Button>\n                            </GridLayout>\n                        </ng-template>\n                    </ListView>\n                </StackLayout>\n                </GridLayout>"
    }),
    __metadata("design:paramtypes", [datasource_1.DataService])
], CombatComponent);
exports.CombatComponent = CombatComponent;
//# sourceMappingURL=data:application/json;base64,