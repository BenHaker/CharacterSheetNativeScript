"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var saves_1 = require("./resources/saves");
var classes_1 = require("./resources/classes");
var spells_1 = require("./resources/spells");
var MetaDataService = (function () {
    function MetaDataService() {
    }
    return MetaDataService;
}());
MetaDataService.getClasses = function () {
    return classes_1.Classes;
};
MetaDataService.getSaves = function (classEnum, level, saveType) {
    var index = 0;
    if (saves_1.Saves[classEnum] == null)
        return 0;
    switch (classEnum) {
        case Class.Fighter:
        case Class.Dwarf:
        case Class.Elf:
        case Class.Halfling:
            index = Math.ceil(level / 3) - 1;
            break;
        case Class.Cleric:
        case Class.Thief:
            index = Math.ceil(level / 4) - 1;
            break;
        case Class.MagicUser:
            index = Math.ceil(level / 5) - 1;
            break;
    }
    if (saves_1.Saves[classEnum][index] == null)
        return 0;
    return saves_1.Saves[classEnum][index][saveType];
};
MetaDataService.getSpellSlots = function (classEnum, characterLevel, spellLevel) {
    var slots = 0;
    var spells;
    switch (classEnum) {
        case Class.Fighter:
        case Class.Dwarf:
        case Class.Thief:
        case Class.Halfling:
            return 0;
        case Class.Cleric:
        case Class.Elf:
        case Class.MagicUser:
            spells = spells_1.SpellsSlots[classEnum];
            if (spells == null)
                return 0;
            if (spells[characterLevel] == null)
                slots = spells[spells.length - 1][spellLevel];
            else
                slots = spells[characterLevel][spellLevel];
            break;
    }
    if (slots == null)
        slots = 0;
    return slots;
};
exports.MetaDataService = MetaDataService;
var Class;
(function (Class) {
    Class[Class["Cleric"] = 0] = "Cleric";
    Class[Class["Fighter"] = 1] = "Fighter";
    Class[Class["MagicUser"] = 2] = "MagicUser";
    Class[Class["Thief"] = 3] = "Thief";
    Class[Class["Dwarf"] = 4] = "Dwarf";
    Class[Class["Elf"] = 5] = "Elf";
    Class[Class["Halfling"] = 6] = "Halfling";
})(Class = exports.Class || (exports.Class = {}));
var SaveType;
(function (SaveType) {
    SaveType[SaveType["DeathRay"] = 0] = "DeathRay";
    SaveType[SaveType["Wand"] = 1] = "Wand";
    SaveType[SaveType["Paralysis"] = 2] = "Paralysis";
    SaveType[SaveType["DragonBreath"] = 3] = "DragonBreath";
    SaveType[SaveType["RodStaffSpell"] = 4] = "RodStaffSpell";
})(SaveType = exports.SaveType || (exports.SaveType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0YWRhdGFzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJtZXRhZGF0YXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLDJDQUF5QztBQUN6QywrQ0FBNkM7QUFDN0MsNkNBQWdEO0FBRWhEO0lBQUE7SUF5REEsQ0FBQztJQUFELHNCQUFDO0FBQUQsQ0FBQyxBQXpERDtBQUVXLDBCQUFVLEdBQUc7SUFDaEIsTUFBTSxDQUFDLGlCQUFPLENBQUM7QUFDbkIsQ0FBQyxDQUFBO0FBRU0sd0JBQVEsR0FBRyxVQUFDLFNBQWdCLEVBQUUsS0FBYSxFQUFFLFFBQWtCO0lBQ2xFLElBQUksS0FBSyxHQUFXLENBQUMsQ0FBQztJQUV0QixFQUFFLENBQUEsQ0FBQyxhQUFLLENBQUMsU0FBUyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDYixNQUFNLENBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ25CLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNqQixLQUFLLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDZixLQUFLLEtBQUssQ0FBQyxRQUFRO1lBQ2YsS0FBSyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNqQyxLQUFLLENBQUM7UUFDVixLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDbEIsS0FBSyxLQUFLLENBQUMsS0FBSztZQUNaLEtBQUssR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDakMsS0FBSyxDQUFDO1FBQ1YsS0FBSyxLQUFLLENBQUMsU0FBUztZQUNoQixLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLEtBQUssQ0FBQztJQUNkLENBQUM7SUFDRCxFQUFFLENBQUEsQ0FBQyxhQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDYixNQUFNLENBQUMsYUFBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzdDLENBQUMsQ0FBQTtBQUVNLDZCQUFhLEdBQUcsVUFBQyxTQUFnQixFQUFFLGNBQXNCLEVBQUUsVUFBa0I7SUFDaEYsSUFBSSxLQUFLLEdBQVcsQ0FBQyxDQUFDO0lBQ3RCLElBQUksTUFBa0IsQ0FBQztJQUV2QixNQUFNLENBQUEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ2YsS0FBSyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQ25CLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQztRQUNqQixLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDakIsS0FBSyxLQUFLLENBQUMsUUFBUTtZQUNmLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDYixLQUFLLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDbEIsS0FBSyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ2YsS0FBSyxLQUFLLENBQUMsU0FBUztZQUNoQixNQUFNLEdBQUcsb0JBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUNoQyxFQUFFLENBQUEsQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDO2dCQUNkLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDYixFQUFFLENBQUEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksSUFBSSxDQUFDO2dCQUM5QixLQUFLLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDbEQsSUFBSTtnQkFDQSxLQUFLLEdBQUcsTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQy9DLEtBQUssQ0FBQztJQUNkLENBQUM7SUFDRCxFQUFFLENBQUEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDO1FBQ2IsS0FBSyxHQUFHLENBQUMsQ0FBQztJQUNkLE1BQU0sQ0FBQyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFBO0FBeERRLDBDQUFlO0FBMkQ1QixJQUFZLEtBRVg7QUFGRCxXQUFZLEtBQUs7SUFDYixxQ0FBTSxDQUFBO0lBQUUsdUNBQU8sQ0FBQTtJQUFFLDJDQUFTLENBQUE7SUFBRSxtQ0FBSyxDQUFBO0lBQUUsbUNBQUssQ0FBQTtJQUFFLCtCQUFHLENBQUE7SUFBRSx5Q0FBUSxDQUFBO0FBQzNELENBQUMsRUFGVyxLQUFLLEdBQUwsYUFBSyxLQUFMLGFBQUssUUFFaEI7QUFFRCxJQUFZLFFBRVg7QUFGRCxXQUFZLFFBQVE7SUFDaEIsK0NBQVEsQ0FBQTtJQUFFLHVDQUFJLENBQUE7SUFBRSxpREFBUyxDQUFBO0lBQUUsdURBQVksQ0FBQTtJQUFDLHlEQUFhLENBQUE7QUFDekQsQ0FBQyxFQUZXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBRW5CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTYXZlcyB9IGZyb20gJy4vcmVzb3VyY2VzL3NhdmVzJ1xyXG5pbXBvcnQgeyBDbGFzc2VzIH0gZnJvbSAnLi9yZXNvdXJjZXMvY2xhc3NlcydcclxuaW1wb3J0IHsgU3BlbGxzU2xvdHMgfSBmcm9tICcuL3Jlc291cmNlcy9zcGVsbHMnXHJcblxyXG5leHBvcnQgY2xhc3MgTWV0YURhdGFTZXJ2aWNlIHtcclxuICAgIFxyXG4gICAgc3RhdGljIGdldENsYXNzZXMgPSAoKTogc3RyaW5nW10gPT4ge1xyXG4gICAgICAgIHJldHVybiBDbGFzc2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRTYXZlcyA9IChjbGFzc0VudW06IENsYXNzLCBsZXZlbDogbnVtYmVyLCBzYXZlVHlwZTogU2F2ZVR5cGUpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIGxldCBpbmRleDogbnVtYmVyID0gMDtcclxuXHJcbiAgICAgICAgaWYoU2F2ZXNbY2xhc3NFbnVtXSA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICBzd2l0Y2goY2xhc3NFbnVtKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2xhc3MuRmlnaHRlcjpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5Ed2FyZjpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5FbGY6XHJcbiAgICAgICAgICAgIGNhc2UgQ2xhc3MuSGFsZmxpbmc6XHJcbiAgICAgICAgICAgICAgICBpbmRleCA9IE1hdGguY2VpbChsZXZlbCAvIDMpIC0gMTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENsYXNzLkNsZXJpYzpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5UaGllZjpcclxuICAgICAgICAgICAgICAgIGluZGV4ID0gTWF0aC5jZWlsKGxldmVsIC8gNCkgLSAxO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2xhc3MuTWFnaWNVc2VyOlxyXG4gICAgICAgICAgICAgICAgaW5kZXggPSBNYXRoLmNlaWwobGV2ZWwgLyA1KSAtIDE7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoU2F2ZXNbY2xhc3NFbnVtXVtpbmRleF0gPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgcmV0dXJuIFNhdmVzW2NsYXNzRW51bV1baW5kZXhdW3NhdmVUeXBlXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0U3BlbGxTbG90cyA9IChjbGFzc0VudW06IENsYXNzLCBjaGFyYWN0ZXJMZXZlbDogbnVtYmVyLCBzcGVsbExldmVsOiBudW1iZXIpOiBudW1iZXIgPT4ge1xyXG4gICAgICAgIGxldCBzbG90czogbnVtYmVyID0gMDtcclxuICAgICAgICBsZXQgc3BlbGxzOiBudW1iZXJbXVtdO1xyXG5cclxuICAgICAgICBzd2l0Y2goY2xhc3NFbnVtKSB7XHJcbiAgICAgICAgICAgIGNhc2UgQ2xhc3MuRmlnaHRlcjpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5Ed2FyZjpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5UaGllZjpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5IYWxmbGluZzpcclxuICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICBjYXNlIENsYXNzLkNsZXJpYzpcclxuICAgICAgICAgICAgY2FzZSBDbGFzcy5FbGY6XHJcbiAgICAgICAgICAgIGNhc2UgQ2xhc3MuTWFnaWNVc2VyOlxyXG4gICAgICAgICAgICAgICAgc3BlbGxzID0gU3BlbGxzU2xvdHNbY2xhc3NFbnVtXTtcclxuICAgICAgICAgICAgICAgIGlmKHNwZWxscyA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwO1xyXG4gICAgICAgICAgICAgICAgaWYoc3BlbGxzW2NoYXJhY3RlckxldmVsXSA9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgIHNsb3RzID0gc3BlbGxzW3NwZWxscy5sZW5ndGggLSAxXVtzcGVsbExldmVsXTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICBzbG90cyA9IHNwZWxsc1tjaGFyYWN0ZXJMZXZlbF1bc3BlbGxMZXZlbF07XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoc2xvdHMgPT0gbnVsbClcclxuICAgICAgICAgICAgc2xvdHMgPSAwO1xyXG4gICAgICAgIHJldHVybiBzbG90cztcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ2xhc3Mge1xyXG4gICAgQ2xlcmljLCBGaWdodGVyLCBNYWdpY1VzZXIsIFRoaWVmLCBEd2FyZiwgRWxmLCBIYWxmbGluZ1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBTYXZlVHlwZSB7XHJcbiAgICBEZWF0aFJheSwgV2FuZCwgUGFyYWx5c2lzLCBEcmFnb25CcmVhdGgsUm9kU3RhZmZTcGVsbFxyXG59Il19